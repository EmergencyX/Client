// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: explorer-server.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace  {
  public static class EmergencyExplorerService
  {
    static readonly string __ServiceName = "EmergencyExplorerService";

    static readonly Marshaller<global::LoginRequest> __Marshaller_LoginRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LoginRequest.Parser.ParseFrom);
    static readonly Marshaller<global::LoginResponse> __Marshaller_LoginResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LoginResponse.Parser.ParseFrom);

    static readonly Method<global::LoginRequest, global::LoginResponse> __Method_Login = new Method<global::LoginRequest, global::LoginResponse>(
        MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_LoginRequest,
        __Marshaller_LoginResponse);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ExplorerServerReflection.Descriptor.Services[0]; }
    }

    // client interface
    public interface IEmergencyExplorerServiceClient
    {
      global::LoginResponse Login(global::LoginRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::LoginResponse Login(global::LoginRequest request, CallOptions options);
      AsyncUnaryCall<global::LoginResponse> LoginAsync(global::LoginRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::LoginResponse> LoginAsync(global::LoginRequest request, CallOptions options);
    }

    // server-side interface
    public interface IEmergencyExplorerService
    {
      Task<global::LoginResponse> Login(global::LoginRequest request, ServerCallContext context);
    }

    // client stub
    public class EmergencyExplorerServiceClient : ClientBase, IEmergencyExplorerServiceClient
    {
      public EmergencyExplorerServiceClient(Channel channel) : base(channel)
      {
      }
      public global::LoginResponse Login(global::LoginRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Login, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::LoginResponse Login(global::LoginRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Login, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::LoginResponse> LoginAsync(global::LoginRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Login, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::LoginResponse> LoginAsync(global::LoginRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Login, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IEmergencyExplorerService serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_Login, serviceImpl.Login).Build();
    }

    // creates a new client
    public static EmergencyExplorerServiceClient NewClient(Channel channel)
    {
      return new EmergencyExplorerServiceClient(channel);
    }

  }
}
#endregion
